function basePath(){const u=new URL('.',location.href);return u.pathname.endsWith('/')?u.pathname:(u.pathname+'/')} function withBase(p){const c=p.replace(/^\//,''); return new URL(c, location.origin + basePath()).toString()} export async function loadRegistry(){const r=await fetch(withBase('content/registry.json')); if(!r.ok) throw new Error('registry'); return r.json()} export async function loadPack(id,reg){const pack=(reg||[]).find(p=>p.id===id)||reg[0]; const b=pack.path; const [meta,board,commons,early,implementation,lords,pingpong]=await Promise.all([fetch(withBase(`${b}/meta.json`)).then(r=>r.json()),fetch(withBase(`${b}/board.json`)).then(r=>r.json()),fetch(withBase(`${b}/cards/commons.json`)).then(r=>r.json()),fetch(withBase(`${b}/cards/early.json`)).then(r=>r.json()),fetch(withBase(`${b}/cards/implementation.json`)).then(r=>r.json()),fetch(withBase(`${b}/cards/lords.json`)).then(r=>r.json()),fetch(withBase(`${b}/cards/pingpong.json`)).then(r=>r.json())]); return { meta, board, decks:{commons,early,implementation,lords,pingpong}, withBase } } export { withBase }