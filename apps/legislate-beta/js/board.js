import { fetchJSON, $ } from './util.js'; import { GameState } from './state.js';
let layer; let scheduled=false; function scheduleRender(){ if(scheduled) return; scheduled=true; requestAnimationFrame(()=>{ scheduled=false; renderTokens(); }); }
export async function loadBoardConfig(){ try{ const data = await fetchJSON('data/board.json'); if(!data||!Array.isArray(data.spaces)||data.spaces.length<58) throw new Error('Invalid board.json'); GameState.board=data; }catch(e){ showFatal('Board not found or invalid. Ensure apps/legislate-beta/data/board.json exists and is valid.'); throw e; } }
export function setupBoardSVG(){ const svg=$('#board-svg'), img=$('#board-image'); layer=$('#tokens-layer'); if(!svg||!img||!layer){ showFatal('Board SVG elements missing from DOM.'); } }
export function renderTokens(){ if(!layer||!GameState.board) return; layer.innerHTML=''; const counts={}; GameState.players.forEach(p=>{ const i=Math.max(0,Math.min(p.index,GameState.board.spaces.length-1)); counts[i]=(counts[i]||0)+1; });
  const at={}; const R=14; GameState.players.forEach(p=>{ const i=Math.max(0,Math.min(p.index,GameState.board.spaces.length-1)); const s=GameState.board.spaces[i]; if(!s) return; at[i]=(at[i]||0)+1; const k=at[i]-1; const n=counts[i];
    const spread=n>1? R*0.9:0; const angle=(k-(n-1)/2)*(Math.PI/6); const dx=spread*Math.cos(angle), dy=spread*Math.sin(angle); const cx=(s.x/100*1600+dx).toFixed(2), cy=(s.y/100*1000+dy).toFixed(2);
    const c=document.createElementNS('http://www.w3.org/2000/svg','circle'); c.setAttribute('cx',cx); c.setAttribute('cy',cy); c.setAttribute('r',R.toFixed(2));
    const active=(GameState.players[GameState.activeIdx]===p); c.setAttribute('class','token '+p.color+(active?' active':'')); layer.appendChild(c); }); }
export function showFatal(msg){ let el=document.getElementById('error-overlay'); if(!el){ el=document.createElement('div'); el.id='error-overlay'; el.style.cssText='position:fixed;inset:0;background:#fff;padding:24px;z-index:9999;font-family:sans-serif;color:#111'; el.innerHTML='<h2>Unable to start</h2><p id="fatal-msg"></p>'; document.body.appendChild(el);} document.getElementById('fatal-msg').textContent=msg; console.error('[fatal]', msg); }